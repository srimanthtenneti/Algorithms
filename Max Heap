#### Info: ####
# Max Heap
# Complete Binary Tree
# Every Node <= Its parent
# Parent = i/2 -> Ex:
# i=4 -> i/2 = 2 -> Index of parent
# left node -> i*2 = 8
# right node ->(i*2)+1

#### Operation: ####
# Max Heap Operations #
# To Push a value
# Add value at end of array
# Float it up to its proper position
# POP remove the max value

#### Code: ####
class MaxHeap:
    def __init__(self , items=[]):
        super().__init__()
        self.heap = [0]
        for i in items:
            self.heap.append(i)
            self.__floatUp(len(self.heap)-1)
    def push(self , data):
        self.heap.append(data)
        self.__floatUp(len(self.heap)-1)
    
    def peek(self):
        if self.heap[1]:
            return self.heap[1]
        else:
            return(False)
    def pop(self):
        if (len(self.heap)>2):
            self.__swap(1,len(self.heap)-1) # We swap 1 ie top value and last value
            max = self.heap.pop()  # Pop the last value and bring the element in 1 to proper position
            self.__bubbleDown(1)
        elif (len(self.heap) == 2):
            max = self.heap.pop() 
        else:
            max = False
        return(max)
    
    def __swap(self,i,j):
        self.heap[i],self.heap[j] = self.heap[j],self.heap[i]
    def __floatUp(self,index):
        parent = index//2
        if index <=1:
            return
        elif(self.heap[index]>self.heap[parent]):
            self.__swap(index, parent)
            self.__floatUp(parent)
    def __bubbleDown(self,index):
        left = index * 2
        right = (index * 2) +1
        largest = index
        if(len(self.heap)>left and self.heap[largest]<self.heap[left]):
            largest = left
        if(len(self.heap)>right and self.heap[largest]<self.heap[right]):
            largest = right
        if(largest!=index):
            self.__swap(index,largest)
            self.__bubbleDown(largest)
            
