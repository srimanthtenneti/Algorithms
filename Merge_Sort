#### Info ####
-> This is a sorting algorithm for a large dataset
-> It does o(nlogn) number of merge steps
-> It is a divide and conquer approach
#### Code:Python ####
def merge_sort(A):
    merge_sort2(A,0,len(A)-1)
def merge_sort2(A,first,last):
    if(first<last):
        middle = (first+last)//2
        merge_sort2(A,first,middle)
        merge_sort2(A,middle+1,last)
        merge(A,first,middle,last)
def merge(A,first,middle,last):
    L=A[first:middle]
    R=A[middle:last+1]
    L.append(9999999)
    R.append(9999999)
    i = j = 0
    for k in range(first,last+1):
        if(L[i]<= R[j]):
            A[k] = L[i]
            i+=1
        else:
            A[k] = R[j]
            j +=1
#### Explanation ####
-> Here we pass a list to a function merge_sort
-> Next we create another function merge_sort2 and pass list the index of first and last element
-> Then split the list into 2 parts, then call the merge_sort2 for first and last half of list
-> Append a large value to list for knowing we reached the end of it
-> if the element of first half of list is smaller than or equal to the first element in other half
-> We assign L[i] to A[k] which means putting back to main list and increment i by 1
-> else assign the element of last half to main list and increment j by 1
